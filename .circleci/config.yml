version: 2.1


######// ////##############//////##############//////##############
#    FILTERS
######//////##############//////##############//////##############      

semver_regex: &semver_regex /^([Vv]?)((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/

release_branches: &release_branches_list
  - main

# Jobs with this filter only run for semver tag push, but not on branch push
release_tag_filter: &release_tag_filter
  filters:
    branches:
      ignore: /.*/
    tags:
      only: *semver_regex

# Any branch except the release branches
non_release_branch_filter: &non_release_branch_filter
  filters:
    branches:
      ignore: *release_branches_list

# Only release branches
release_branch_filter: &release_branch_filter
  filters:
    branches:
      only: *release_branches_list


######//////##############//////##############//////##############
#   JOBS
######//////##############//////##############//////##############
jobs:
  build_image:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Image
          command: |
            env CGO_ENABLED="0" \
                GOOS=linux \
                GOARCH=amd64 \
                go build \
                -a \
                -o="pkg/linux_amd64/http-echo" \
                -ldflags "-s -w"

            VERSION=${CIRCLE_BRANCH}-$(git rev-parse HEAD) 
            DOCKER_TAG="$DOCKERHUB_USERNAME/http-echo:$VERSION"
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker build \
              --rm \
              --force-rm \
              --no-cache \
              --compress \
              --file="docker/alpine/Dockerfile" \
              --build-arg="LD_FLAGS=\"-s -w\"" \
              --tag="$DOCKER_TAG" \
              .
            docker push "$DOCKER_TAG"
  test:
    docker: # executor type
      - image: cimg/base:stable
    steps: 
      - run:
          name: Run Tests
          command: | 
            true

  deploy_gate:
    docker: # executor type
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Check if branch is auto-deploy or in PR preview
          command: |
            AUTODEPLOY_BRANCHES=("staging" "rc" "production")
            if [[ " ${AUTODEPLOY_BRANCHES[*]} " =~ " ${CIRCLE_BRANCH} " ]]; then 
              echo ${CIRCLE_BRANCH} is set to autodeploy, proceeding with retag for deployment
              echo "export TAG_VERSION=${CIRCLE_BRANCH}" >> $BASH_ENV
              exit 0
            fi
            BRANCH_PR=$(curl -s \
             -H "Accept: application/vnd.github+json" \
             -H "Authorization: token $GITHUB_TOKEN" \
             "https://api.github.com/repos/mf-jhellman/harness-test-app/pulls?head=mf-jhellman:${CIRCLE_BRANCH}&base=staging" \
             | jq '.[0] | del(.body)')
            if [ "$BRANCH_PR" != "null" ]; then
              PREVIEW_LABEL_ATTACHED=$(echo $BRANCH_PR | jq '.labels[] | select(.name=="Preview")')
            fi
            if [ -z "$PREVIEW_LABEL_ATTACHED" ]; then
              echo "Branch ${CIRCLE_BRANCH} is not currently in a pull request to staging with the Preview label"
              echo "(Add the Preview label to any PR to staging to create an ephemeral deployment of the branch!)"
              circleci-agent step halt
              exit 0
            fi
            PR_NUM=$(echo $BRANCH_PR | jq '.number')
            echo "export TAG_VERSION=pr-${PR_NUM}" >> $BASH_ENV
            echo "Branch ${CIRCLE_BRANCH} is currently in pull request with Preview label #${PR_NUM}"
            echo "Proceeding with retag for deployment"
      - run:
          name: Tag Image for Deployment
          command: |
            OLD_VERSION=${CIRCLE_BRANCH}-$(git rev-parse HEAD) 
            NEW_VERSION=${TAG_VERSION}-$(git rev-parse HEAD) 
            OLD_DOCKER_TAG="$DOCKERHUB_USERNAME/http-echo:$OLD_VERSION"
            NEW_DOCKER_TAG="$DOCKERHUB_USERNAME/http-echo:$NEW_VERSION-deploy"
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker pull ${OLD_DOCKER_TAG}
            docker tag ${OLD_DOCKER_TAG} ${NEW_DOCKER_TAG}
            docker push ${NEW_DOCKER_TAG}

######//////##############//////##############//////##############
#   WORKFLOWS
######//////##############//////##############//////##############

workflows:
  version: 2

  build_and_test:
    jobs:
      - build_image:
          context: 
            - DOCKERHUB
      - test:
          requires:
            - build_image
      - deploy_gate:
          context: 
            - DOCKERHUB
          requires:
            - test
