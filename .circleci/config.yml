version: 2.1

######//////##############//////##############//////##############
#   ORBS
######//////##############//////##############//////##############

orbs:
  octopus: octopusdeploylabs/octopus-cli@0.0.3


  

######//////##############//////##############//////##############
#   DEFAULTS
######//////##############//////##############//////##############

defaults: &defaults
  working_directory: ~/MarkForged/zztest-octopus-deploy
  parallelism: 1
  shell: /bin/bash --login

eiger-dev-account: &eiger_dev_account
  resource_class: markforged/smartslice-dev
  context:
    - smartslice-build-publish-eiger-dev

######//////##############//////##############//////##############
#   EXECUTORS
######//////##############//////##############//////##############   

executors:
  basic: &default_executor
    docker:
      - image: cimg/node:14.18.0-browsers  

######//////##############//////##############//////##############
#   FILTERS
######//////##############//////##############//////##############      

semver_regex: &semver_regex /^([Vv]?)((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/

release_branches: &release_branches_list
  - main

# Jobs with this filter only run for semver tag push, but not on branch push
release_tag_filter: &release_tag_filter
  filters:
    branches:
      ignore: /.*/
    tags:
      only: *semver_regex

# Any branch except the release branches
non_release_branch_filter: &non_release_branch_filter
  filters:
    branches:
      ignore: *release_branches_list

# Only release branches
release_branch_filter: &release_branch_filter
  filters:
    branches:
      only: *release_branches_list

######//////##############//////##############//////##############
#   OCTOPUS
######//////##############//////##############//////##############
octopus_environment_settings: &octopus_environment_settings
  api_key: "OCTOPUS_API_KEY"
  server:  "OCTOPUS_SERVER_URL"
  space: "Demo"

######//////##############//////##############//////##############
#   JOBS
######//////##############//////##############//////##############
jobs:
  octopus:
    parameters:
      package-name:
        type: string
        default: foo
      
      # package-version:
      #   type: string
      #   default: 0.0.0

      octopus-project:
        type: string
        default: none

      octopus-channel:
        type: string
        default: none  

    working_directory: ~/MarkForged/<< parameters.package-name >>
   
    executor:
        name: octopus/default
    steps:
      - checkout

      - run:
          name: "Setting Package Version"
          command: |
            GIT_TAG=<< pipeline.git.tag >>
            if [ -z "$GIT_TAG" ]
            then                
              PACKAGEVERSION=0.0.<< pipeline.number >>
              echo "No Git Tag, setting package version to  $PACKAGEVERSION"
            else
              PACKAGEVERSION="${GIT_TAG#?}" 
              echo "Git Tag Exists, setting package version to $PACKAGEVERSION"
            fi
            echo "Adding $PACKAGEVERSION to Bash Environment"
            echo "export OCTOPUS_PACKAGE_VERSION=${PACKAGEVERSION}" >> "$BASH_ENV"

      - run:
          name: Creating Artifacts
          command: |
            mkdir /tmp/artifacts;
            cd ~/MarkForged/<< parameters.package-name >>/deploy && zip -r /tmp/artifacts/<< parameters.package-name >>."${OCTOPUS_PACKAGE_VERSION}".zip terraform;

      - store_artifacts:
          path: /tmp/artifacts
          destination: /terraform

      - octopus/install-tools

      - octopus/build-information:
          <<: *octopus_environment_settings
          package_id: << parameters.package-name >>
          version: $OCTOPUS_PACKAGE_VERSION
          overwrite_mode: "OverwriteExisting"

          #TODO - Could put stuff like git commit information into this build info: 
          # https://octopus.com/docs/octopus-rest-api/octopus-cli/build-information
          # https://octopus.com/docs/octopus-rest-api/octopus-cli/build-information

      - octopus/push:
          <<: *octopus_environment_settings
          package: /tmp/artifacts/<< parameters.package-name >>."$OCTOPUS_PACKAGE_VERSION".zip

      - octopus/create-release:
          <<: *octopus_environment_settings
          project: << parameters.octopus-project >>
          release_number: $OCTOPUS_PACKAGE_VERSION
          package: << parameters.package-name >>:$OCTOPUS_PACKAGE_VERSION
          channel: << parameters.octopus-channel >>

          ## Required if Project is using the Git Source Control for the process
          # TOOD - have open question to octopus support about this
          # git_ref: << pipeline.git.branch >>
          # git_Commit: << pipeline.git.revision	>>

######//////##############//////##############//////##############
#   WORKFLOWS
######//////##############//////##############//////##############

workflows:
  version: 2

  build_example:
    jobs:
      - octopus:
          <<: *non_release_branch_filter
          # package-version: "0.0.<< pipeline.number >>"
          name: Octopus Auto Deploy to DEV
          package-name:    "zztest-octopus-deploy"
          octopus-project: "zztest-octopus-deploy"
          octopus-channel: "1. Dev Only Automatic Deploy"

      - octopus:
          <<: *release_branch_filter
          # package-version: "0.0.<< pipeline.number >>"
          name: Octopus Auto Deploy to Staging
          package-name:    "zztest-octopus-deploy"
          octopus-project: "zztest-octopus-deploy"
          octopus-channel: "2. Staging Only Automatic Deploy"    

      - octopus:
          <<: *release_tag_filter
          # package-version: "<< pipeline.git.tag >>"
          name: Octopus Prepare Deploy to RC/PROD
          package-name:    "zztest-octopus-deploy-PROD"
          octopus-project: "zztest-octopus-deploy"
          octopus-channel: "3. Tagged Release Managed Deployment"