step "plan-to-apply-a-terraform-template" {
    name = "Plan to apply a Terraform template"

    action {
        action_type = "Octopus.TerraformPlan"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "#{Project.AWS Account}"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.PackageId = "zztest-octopus-deploy"
            Octopus.Action.Script.ScriptSource = "Package"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "False"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "AWS"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "False"
            Octopus.Action.Terraform.TemplateDirectory = "terraform"
            Octopus.Action.Terraform.VarFiles = "vars/#{_Environment}.tfvars"
            Octopus.Action.Terraform.Workspace = "#{_Environment}"
        }
        worker_pool = "testing"

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "zztest-octopus-deploy"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}